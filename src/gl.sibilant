


(require! Andy "./andy"
          utils "./utils")
(var Gl {})


(var (lit Buffer Program Shader Attribute Type Context Uniform) Andy.Gl
     (lit Blend-mode) Andy.Color)
(assign global.Program Program)


(def Gl.shader (type-name string context)
  (new Andy.Gl.Shader (get Andy.Gl.Shader type-name) string))


(def Gl.buffer (*members context)
  (pipe (new Andy.Gl.Buffer  context.ARRAY_BUFFER, context.DYNAMIC_DRAW)
        (.bind)
        (.data *members.data)
        (.unbind)))

(def Gl.context (dimensions blend)
  (pipe (new Andy.Context)
        (.make-current)
        (.resize (dots dimensions))
        (.clear-color 0 0 0 0)
        (.blend blend)
        (.clear)))

(def Gl.uniform (type-name var-name value)
  (new (get Andy.Gl.Uniform type-name) var-name value))

;; (assign Gl.shaders
;;         (lit
;;          (vert (shader 'vertex (vert-shader)))
;;          (frag (shader 'frag fragment-shader-string))))
;; (new Andy.Gl.Uniform.Sampler 0 (* 32 32))


(def Gl.program (vert frag context)
  (new Andy.Gl.Program
       (Gl.shader 'vertex vert context)
       (Gl.shader 'fragment frag context)))

;; (def def-glsl (out-type name in-types (dots body))

;;      (collect shader (.join [out-type name "(" (.join in-types ",") ")" "{\n"
;;                                       (dots body)
;;                                       "}"] " ")
;;               ))

(export Gl)

(export Andy)
