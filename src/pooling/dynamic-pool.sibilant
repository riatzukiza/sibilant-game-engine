
(include "kit-interface/header")
(import-namespace interface)
(require! (lit Object-pool) "./object-pool"
          (lit List ) "../data-structures/list")

(include "../../inc/docs")

(import-namespace docs)

(def sum-of (list p)
     (.reduce list (=> (total e) (+ total (get e p))) 0)
     )

(define Dynamic-pool Interface
  (bucket-size 256)
  (init (interface bucket-size (buckets  (List.of ((create Object-pool) this.bucket-size interface)))))

  (gett current this.buckets.head.item)
  (gett size (* this.bucket-size this.buckets.length))
  (gett used (sum-of this.buckets 'used))

  (def-generic grow ( buckets  bucket-size (self this))
    (doc-string "Pools.Dynamic.grow" "buckets bucket-size (self this)"

                "add a new pool bucket, increasing the number of pre constructed objects in the pool.")

    (collect new-pool ((create Object-pool) bucket-size this.interface)
             (.unshift buckets new-pool)))

  (def-generic adjust (buckets)

    (doc-string "Pools.Dynamic.adjust" "buckets"
                "reorder the buckets of the object pool so a bucket with available members is the next to be chosen.
If no existing bucket has free members, the pool is grown and a new bucket is created.")

    (var p (.rotate-until buckets (#-> (get 'free) (> 0))))
    (ternary p p (.grow this)))

  (def-generic aquire ( buckets )

    (doc-string "Pools.Dynamic.aquire" "buckets"
                "returns an object from the pool for use."
                (example (var taco-pool (.construct Pools.Dynamic Taco))
                         (var taco (.aquire taco-pool "chiken"))
                         (.init taco val1, val2)))

    (collect object (if this.current.free
                        (.aquire this.current)
                      (pipe this .adjust .aquire ))
             (assign object.bucket this.current)))

  (def-generic release (object buckets )

    (doc-string "Pools.Dynamic.release" "object buckets"
                "clears the object given to it of all data (deinitializes it), and frees it up for future use.")

    (.release object.bucket object))

  (def-generic clear (buckets)
    (doc-string "Pools.Dynamic.clear" "buckets"
                "clears all objects currently in the pool of data and releases them.")

    (var self this)

    (.each self (#-> self.despawn)))

  (def-generic each (f buckets)
    (doc-string "Pools.Dynamic.each"
                ("+ callback\n"
                 "+ buckets")
                "execute the given callback for each in use object in the pool.")

    (var self this)

    (.each buckets (#-> (get '*in-use) (.each f))))

  (def spawn ((dots args))
       (doc-string "Pools.Dynamic.spawn" "[...init-args]"
                   "aquire an object from the systems pool, and initialize it.")

    (collect r (pipe this .aquire)
             (.init r (dots args))))

  (def despawn (obj)

       (doc-string 'Pools.Dynamic.despawn '[obj, foobar]
                   "remove an object from the system, and release it back into the pool.")

    (.clear obj)
    (.release this obj))

  (def register (interface)

       (doc-string 'Pools.Dynamic.register
                   "interface"
                   "Associate an interface with a system,and add the system to the collection of all active systems.")

    (assign interface.pool this)))

(export Dynamic-pool)
