
(include "kit-interface/header")
(import-namespace interface)
(require! (lit Group) "../data-structures/group")


(var *assign-id (=> (m k) (assign  m.id k) m))


(macro array-of (size ...body)
       `(collect array []
                 (do-times @size (.push array (scoped ...@body)) array)))

(define Object-pool Interface
  (init (size
         (*interface null)
         (*array (array-of size (Object.create *interface)))

         (*members (Group.from *array))

         (*available (Group.from *array))

         (*in-use (.create Group )))
        (.each *array *assign-id)
        )



  (pools (new Map))

  (gett free this.*available.size)
  (gett used this.*in-use.size)
  (gett total this.*members.size)

  (def-generic clear (size *interface *array *in-use)
    (each *in-use (o)
          (.clear o))
    (.init this size *interface *array))

  (def-generic aquire ( *available *members *in-use )
    "remove an object from the collection of available ones,
adding it to the collection of objects currently in use,
and return it to the caller."
    (collect  member (.pop *available)

              ;; (sprint *available
              ;;         this.*members
              ;;         member)

              (.add *in-use member)))

  (def-generic release (obj *available *members *in-use)
    "take an object that is a member of this pool, and remove it
from the collection of in use objects, and adding it to the collection of
available ones, for later use"

    (.remove *in-use obj)
    (.add *available obj)))
(export Object-pool)
