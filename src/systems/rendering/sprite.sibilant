

(include "kit-interface/header")
(import-namespace interface)

(require! (lit Matrix-map) "../../data-structures/matrix-map"
          (lit uniforms) "../../gl")

(define Sprite-interface Component

  (def-generic register (dim system)
    (assign this.verts ((create Matrix-map) dim
                        (array-of (product-of dim)
                                  (.spawn system.verts )))))
  (frame-id 0),

  (delay 1) ;; number of ticks between frames

  (gett pos (.get Position this.entity))

  (gett dim this.data.dim),
  (gett image (.resolve Promise this.data.image)),
  (gett frame-count this.data.frame-count),
  (gett scale this.data.scale)
  (gett orientation this.data.orientation )

  (gett height (second this.dim))
  (gett width (first this.dim))

  (gett x this.pos.x)
  (gett y this.pos.y)

  (def-generic get-frame-pixel (i j bit-map width frame-id frame-count image)
    (.get  bit-map [(+ i (* width (mod   frame-id frame-count))) j]))

  (def-generic move-vertex (i j scale v pos height width orientation)
    (set v.point
         'x (mod (+ (- pos.x (/ (* width scale (first orientation)) 2))
                    (* i scale (first orientation)))
                 (first this.game.rendering.dimensions))

         'y (mod (+ (- pos.y (/ (* height scale (second orientation)) 2))
                    (* j scale (second orientation)))
                 (second this.game.rendering.dimensions))

         'z 0))

  (def set-color (v pixel)
    (set v.color
         'r pixel.r
         'g pixel.g
         'b pixel.b
         'a pixel.a))

  (def step () (assign this.frame-id (mod (+ this.frame-id 1) this.frame-count)))

  (def-generic draw (t verts image scale frame-id frame-count pos height width)
    (then image bit-map
          ( .each verts (=> (v [i j])
                            (var pixel (.get-frame-pixel this i j bit-map))

                            (.move-vertex this i j scale v)
                            (set v 'size scale)
                            (.set-color this v pixel))))))

(export Sprite-interface)

(define Sprite Component-system
  (def register ()
       (assign this.verts (.spawn this.game.rendering 1000000 Vertex
                                  [ uniforms.res uniforms.scale]
                                  [(vert-shader) fragment-shader-string])))
  (interface Sprite-interface)

  (def *update-component (sprite t) (.draw sprite t)))

(export Sprite)
